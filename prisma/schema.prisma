// prisma/schema.prisma

 generator client {
  provider = "prisma-client-js"
 }


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?     // obrigatório para o adapter
  image         String?       // obrigatório para o adapter
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // suas sessions de chat
  chatSessions  ChatSession[]

  // relações usadas pelo Auth.js
  accounts      Account[]     // armazena tokens OAuth, etc
  sessions      Session[]     // armazena sessionTokens JWT ou DB
}

model ChatSession {
  id          String   @id @default(uuid())
  userId      String
  threadId    String?  @unique
  isFavorite  Boolean  @default(false)
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
