// app/api/openai/route.ts
import { auth } from '@/auth'
import {
  addMessageToThread,
  createThread,
  getMessages,
  runAssistant,
  waitForRunCompletion
} from '@/lib/assistant'
import { createChatSessionWithThread } from '@/lib/chatService'
import { prisma } from '@/lib/prisma'
import { getUserLimits, getUserPeriod } from '@/lib/userPeriod'
import { NextResponse } from 'next/server'

const ASSISTANT_ID = process.env.OPENAI_ASSISTANT_ID!

// Configura√ß√£o de timeout para Next.js 15
// Usa ambas as sintaxes para garantir compatibilidade m√°xima
export const maxDuration = 300 // 5 minutos (para planos Pro do Vercel)
export const runtime = 'nodejs' // Garante uso do runtime Node.js

// Sintaxe alternativa para compatibilidade (se maxDuration direto n√£o funcionar)
export const config = {
  maxDuration: 300, // 5 minutos
  runtime: 'nodejs' as const
}

export async function POST(req: Request) {
  const session = await auth()
  if (!session?.user?.id) {
    return NextResponse.json({ error: 'N√£o autenticado' }, { status: 401 })
  }
  const userId = session.user.id
  const { message } = await req.json()

  // ‚îÄ‚îÄ 1) Verifica limite de sess√µes hoje ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // In√≠cio do dia (00:00)
  const startOfDay = new Date()
  startOfDay.setHours(0, 0, 0, 0)

  // Conta quantas ChatSession o usu√°rio j√° criou hoje
  const todayCount = await prisma.chatSession.count({
    where: {
      userId,
      createdAt: { gte: startOfDay }
    }
  })

  // ‚îÄ‚îÄ 2) Verifica assinatura ativa ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const hasActiveSubscription = await prisma.subscription.findFirst({
    where: {
      userId,
      status: {
        in: ['active', 'ACTIVE', 'cancel_at_period_end']
      },
      currentPeriodEnd: {
        gte: new Date()
      }
    },
    select: {
      id: true // S√≥ seleciona o ID para verificar exist√™ncia
    }
  })

  // ‚îÄ‚îÄ 3) Se n√£o tiver assinatura, aplica regras do plano gratuito ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  if (!hasActiveSubscription) {
    // Busca informa√ß√µes do usu√°rio para saber a data de cadastro
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { createdAt: true }
    })
    
    if (!user) {
      return NextResponse.json({ error: 'Usu√°rio n√£o encontrado' }, { status: 404 })
    }
    
    // Determina o per√≠odo e limites do usu√°rio
    const userPeriod = getUserPeriod(user.createdAt)
    const { searchLimit } = getUserLimits(userPeriod)
    
    // Verifica se excedeu o limite baseado no per√≠odo
    if (todayCount >= searchLimit) {
      return NextResponse.json({ 
        limitReached: true,
        period: userPeriod,
        searchLimit
      }, { status: 403 })
    }
  }

  const startTime = Date.now()
  
  try {
    console.log(`[API OpenAI] üöÄ Iniciando processamento para usu√°rio ${userId}`)
    
    // ‚îÄ‚îÄ 4) Cria thread e registra ChatSession ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    const threadStart = Date.now()
    const threadId = await createThread()
    await createChatSessionWithThread(userId, threadId)
    console.log(`[API OpenAI] ‚úÖ Thread criada em ${Date.now() - threadStart}ms: ${threadId}`)

    // ‚îÄ‚îÄ 5) Envia a mensagem ao assistant e aguarda resposta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    const runStart = Date.now()
    await addMessageToThread(threadId, message)
    const runId = await runAssistant(threadId, ASSISTANT_ID)
    console.log(`[API OpenAI] üîÑ Run iniciado em ${Date.now() - runStart}ms: ${runId}`)
    
    await waitForRunCompletion(threadId, runId)
    const runDuration = Date.now() - runStart
    console.log(`[API OpenAI] ‚úÖ Run completado em ${runDuration}ms`)

    // ‚îÄ‚îÄ 6) Busca as mensagens geradas e retorna ao cliente ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    const messagesStart = Date.now()
    const responses = await getMessages(threadId)
    console.log(`[API OpenAI] üì® Mensagens obtidas em ${Date.now() - messagesStart}ms`)
    
    const totalDuration = Date.now() - startTime
    console.log(`[API OpenAI] ‚úÖ Processamento completo em ${totalDuration}ms`)
    
    // ‚îÄ‚îÄ 7) Se n√£o tiver assinatura, inclui informa√ß√µes do per√≠odo na resposta ‚îÄ‚îÄ‚îÄ
    if (!hasActiveSubscription) {
      // Busca informa√ß√µes do usu√°rio para determinar o per√≠odo
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { createdAt: true }
      })
      
      if (user) {
        const userPeriod = getUserPeriod(user.createdAt)
        const { fullVisualization } = getUserLimits(userPeriod)
        
        return NextResponse.json({ 
          responses, 
          threadId,
          userPeriod,
          fullVisualization,
          shouldShowPopup: true // Flag para indicar que deve mostrar o popup
        })
      }
    }
    
    return NextResponse.json({ responses, threadId })
  } catch (err) {
    const duration = Date.now() - startTime
    const errorMessage = err instanceof Error ? err.message : String(err)
    const isTimeout = errorMessage.includes('Timeout') || 
                     errorMessage.includes('504') ||
                     errorMessage.includes('FUNCTION_INVOCATION_TIMEOUT') ||
                     duration >= 290000 // Pr√≥ximo do limite de 5 minutos
    
    console.error(`[API OpenAI] ‚ùå Erro ap√≥s ${duration}ms:`, {
      error: errorMessage,
      isTimeout,
      threadId: err instanceof Error ? err.stack : undefined
    })
    
    // Retorna erro espec√≠fico para timeout
    if (isTimeout) {
      return NextResponse.json(
        { 
          error: 'A consulta est√° demorando mais do que o esperado. Por favor, tente novamente com uma pergunta mais espec√≠fica.',
          timeout: true,
          duration
        },
        { status: 504 }
      )
    }
    
    return NextResponse.json(
      { 
        error: 'Erro ao processar sua consulta. Por favor, tente novamente.',
        details: process.env.NODE_ENV === 'development' ? errorMessage : undefined
      },
      { status: 500 }
    )
  }
}
