// src/lib/whatsappService.ts


/**
 * Converte n√∫mero para formato E164 (Brasil)
 */
export function toBrazilE164(phone: string): string {
  // Remove todos os caracteres n√£o num√©ricos
  const cleanPhone = phone.replace(/\D/g, '')
  
  // Se j√° tem c√≥digo do pa√≠s, retorna
  if (cleanPhone.startsWith('55')) {
    return `+${cleanPhone}`
  }
  
  // Se tem 11 d√≠gitos (celular), adiciona c√≥digo do pa√≠s
  if (cleanPhone.length === 11) {
    return `+55${cleanPhone}`
  }
  
  // Se tem 10 d√≠gitos (fixo), adiciona c√≥digo do pa√≠s
  if (cleanPhone.length === 10) {
    return `+55${cleanPhone}`
  }
  
  // Se tem 9 d√≠gitos, assume que falta o DDD
  if (cleanPhone.length === 9) {
    return `+5511${cleanPhone}` // Assume SP como padr√£o
  }
  
  // Retorna como est√° se n√£o conseguir formatar
  return `+55${cleanPhone}`
}

/**
 * Envia mensagem de texto via WhatsApp usando Z-API
 */
export async function sendWhatsAppText(phone: string, message: string): Promise<boolean> {
  try {
    const formattedPhone = toBrazilE164(phone)
    
    // Z-API endpoint
    const zapiSendText = `${process.env.ZAPI_BASE_URL}/instances/${process.env.ZAPI_INSTANCE_ID}/token/${process.env.ZAPI_TOKEN}/send-text`
    
    const payload = {
      phone: formattedPhone,
      message: message
    }

    const response = await fetch(zapiSendText, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Client-Token': process.env.ZAPI_CLIENT_TOKEN || ''
      },
      body: JSON.stringify(payload)
    })

    if (response.ok) {
      console.log(`[WhatsApp] Mensagem enviada para ${formattedPhone}`)
      return true
    } else {
      const errorText = await response.text().catch(() => '<no-body>')
      console.error(`[WhatsApp] Erro ao enviar para ${formattedPhone}:`, {
        status: response.status,
        body: errorText
      })
      return false
    }
  } catch (error) {
    console.error(`[WhatsApp] Erro de conex√£o para ${phone}:`, error)
    return false
  }
}

/**
 * Envia mensagem com link via WhatsApp usando Z-API
 */
export async function sendWhatsAppLink(phone: string, title: string, url: string, description: string): Promise<boolean> {
  try {
    const formattedPhone = toBrazilE164(phone)
    
    // Z-API endpoints
    const zapiSendMessageLink = `${process.env.ZAPI_BASE_URL}/instances/${process.env.ZAPI_INSTANCE_ID}/token/${process.env.ZAPI_TOKEN}/send-message-link`

    // 1) Tenta enviar usando send-message-link (bot√£o/link)
    let sentLink = false
    try {
      const linkPayload = {
        phone: formattedPhone,
        title: title,
        url: url,
        description: description
      }

      const linkResponse = await fetch(zapiSendMessageLink, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Client-Token': process.env.ZAPI_CLIENT_TOKEN || ''
        },
        body: JSON.stringify(linkPayload)
      })

      if (linkResponse.ok) {
        sentLink = true
        console.log(`[WhatsApp] Link enviado para ${formattedPhone}`)
      } else {
        const errorText = await linkResponse.text().catch(() => '<no-body>')
        console.error(`[WhatsApp] Erro send-message-link para ${formattedPhone}:`, {
          status: linkResponse.status,
          body: errorText
        })
      }
    } catch (error) {
      console.error(`[WhatsApp] Erro send-message-link para ${formattedPhone}:`, error)
    }

    // 2) Fallback: se send-message-link n√£o funcionou, envia como texto
    if (!sentLink) {
      const textMessage = `${description}\n\n${title}: ${url}`
      return await sendWhatsAppText(phone, textMessage)
    }

    return true
  } catch (error) {
    console.error(`[WhatsApp] Erro geral para ${phone}:`, error)
    return false
  }
}

/**
 * Envia c√≥digo de verifica√ß√£o 2FA
 */
export async function send2FACode(phone: string, code: string, adminName: string): Promise<boolean> {
  const message = `üîê C√≥digo de verifica√ß√£o meDIZ Admin: ${code}

Ol√° ${adminName}!

Este c√≥digo expira em 5 minutos.

Se voc√™ n√£o solicitou este c√≥digo, ignore esta mensagem.`

  return await sendWhatsAppText(phone, message)
}

/**
 * Envia link de confirma√ß√£o de cadastro
 */
export async function sendSignupConfirmation(phone: string, userName: string, confirmationUrl: string): Promise<boolean> {
  const message = `Ol√° ${userName}! üëã

Bem-vindo(a) ao meDIZ! 

Para confirmar seu cadastro e ativar sua conta, clique no link abaixo:

${confirmationUrl}

‚ö†Ô∏è IMPORTANTE: Para que o link funcione corretamente, voc√™ precisa adicionar este n√∫mero aos seus contatos do WhatsApp antes de clicar no link.

Ap√≥s adicionar o contato, clique no link acima para confirmar seu cadastro.`

  return await sendWhatsAppText(phone, message)
}

/**
 * Envia alerta de seguran√ßa para admins
 */
export async function sendSecurityAlert(phone: string, alertType: string, details: string): Promise<boolean> {
  const message = `üö® ALERTA DE SEGURAN√áA - meDIZ

Tipo: ${alertType}

Detalhes: ${details}

Timestamp: ${new Date().toLocaleString('pt-BR')}

Se voc√™ n√£o reconhece esta atividade, entre em contato com a equipe t√©cnica imediatamente.`

  return await sendWhatsAppText(phone, message)
}

/**
 * Envia notifica√ß√£o de login suspeito
 */
export async function sendSuspiciousLoginAlert(phone: string, adminName: string, ipAddress: string, userAgent: string): Promise<boolean> {
  const message = `‚ö†Ô∏è LOGIN SUSPEITO DETECTADO - meDIZ

Ol√° ${adminName},

Detectamos um login em sua conta admin com as seguintes informa√ß√µes:

üìç IP: ${ipAddress}
üñ•Ô∏è Dispositivo: ${userAgent}
‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}

Se foi voc√™, pode ignorar esta mensagem.
Se n√£o foi voc√™, altere sua senha imediatamente!`

  return await sendWhatsAppText(phone, message)
}

/**
 * Envia notifica√ß√£o de m√∫ltiplas tentativas de login
 */
export async function sendMultipleLoginAttemptsAlert(phone: string, adminName: string, attempts: number, ipAddress: string): Promise<boolean> {
  const message = `üîí M√öLTIPLAS TENTATIVAS DE LOGIN - meDIZ

Ol√° ${adminName},

Detectamos ${attempts} tentativas de login falhadas em sua conta admin:

üìç IP: ${ipAddress}
‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}

Por seguran√ßa, recomendamos:
1. Verificar se sua senha est√° segura
2. Alterar a senha se necess√°rio
3. Verificar se algu√©m tem acesso n√£o autorizado

Se voc√™ n√£o fez essas tentativas, entre em contato com a equipe t√©cnica.`

  return await sendWhatsAppText(phone, message)
}

/**
 * Envia notifica√ß√£o de exporta√ß√£o de dados
 */
export async function sendDataExportAlert(phone: string, adminName: string, exportType: string, recordCount: number): Promise<boolean> {
  const message = `üìä EXPORTA√á√ÉO DE DADOS - meDIZ

Ol√° ${adminName},

Uma exporta√ß√£o de dados foi realizada:

üìã Tipo: ${exportType}
üìà Registros: ${recordCount}
‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}

Se voc√™ n√£o solicitou esta exporta√ß√£o, entre em contato com a equipe t√©cnica imediatamente.`

  return await sendWhatsAppText(phone, message)
}

/**
 * Verifica se o WhatsApp est√° configurado
 */
export function isWhatsAppConfigured(): boolean {
  return !!(
    process.env.ZAPI_BASE_URL &&
    process.env.ZAPI_INSTANCE_ID &&
    process.env.ZAPI_TOKEN
  )
}

/**
 * Simula envio de WhatsApp para testes
 */
export function simulateWhatsAppSend(phone: string, message: string): boolean {
  console.log(`üß™ [SIMULA√á√ÉO WHATSAPP] Para: ${phone}`)
  console.log(`üß™ [SIMULA√á√ÉO WHATSAPP] Mensagem: ${message}`)
  console.log(`üß™ [SIMULA√á√ÉO WHATSAPP] ‚úÖ Enviado com sucesso`)
  return true
}