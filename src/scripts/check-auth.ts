// src/scripts/check-auth.ts
/**
 * Script para verificar configura√ß√µes de autentica√ß√£o
 * 
 * Execu√ß√£o: npx ts-node -r tsconfig-paths/register src/scripts/check-auth.ts
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkAuth() {
  console.log('üîç Verificando configura√ß√µes de autentica√ß√£o...')
  
  // Verificar vari√°veis de ambiente essenciais
  console.log('\nüìã Vari√°veis de ambiente:')
  console.log(`- NEXTAUTH_SECRET: ${process.env.NEXTAUTH_SECRET ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`)
  console.log(`- NEXTAUTH_URL: ${process.env.NEXTAUTH_URL ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`)
  console.log(`- NODE_ENV: ${process.env.NODE_ENV || 'n√£o definido'}`)
  
  // Verificar usu√°rios no banco de dados
  console.log('\nüìã Usu√°rios no banco de dados:')
  try {
    const userCount = await prisma.user.count()
    console.log(`- Total de usu√°rios: ${userCount}`)
    
    // Contar usu√°rios por dom√≠nio de email
    const users = await prisma.user.findMany({ select: { email: true } })
    const domains: Record<string, number> = {}
    
    users.forEach(user => {
      if (user.email) {
        const domain = user.email.split('@')[1]
        domains[domain] = (domains[domain] || 0) + 1
      }
    })
    
    console.log('- Usu√°rios por dom√≠nio de email:')
    Object.entries(domains).forEach(([domain, count]) => {
      console.log(`  - ${domain}: ${count}`)
    })
    
    // Verificar usu√°rios admin (@mediz.com)
    const adminUsers = users.filter(u => u.email?.includes('@mediz.com'))
    console.log(`- Usu√°rios admin (@mediz.com): ${adminUsers.length}`)
    
    if (adminUsers.length > 0) {
      console.log('- Lista de emails admin:')
      adminUsers.forEach(user => {
        console.log(`  - ${user.email}`)
      })
    } else {
      console.log('‚ùå Nenhum usu√°rio admin encontrado!')
      console.log('  Execute o script create-admin.ts para criar um usu√°rio admin.')
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar usu√°rios:', error)
  }
  
  // Verificar sess√µes ativas
  console.log('\nüìã Sess√µes:')
  try {
    const sessionCount = await prisma.session.count()
    console.log(`- Sess√µes ativas: ${sessionCount}`)
    
    if (sessionCount > 0) {
      const recentSessions = await prisma.session.findMany({
        take: 5,
        orderBy: { expires: 'desc' },
        include: { user: true }
      })
      
      console.log('- Sess√µes recentes:')
      recentSessions.forEach(session => {
        console.log(`  - Usu√°rio: ${session.user?.email || 'desconhecido'}`)
        console.log(`    Expira em: ${session.expires.toLocaleString()}`)
      })
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar sess√µes:', error)
  }
  
  // Concluir
  console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!')
}

// Executar a fun√ß√£o
checkAuth()
  .catch((error) => {
    console.error('‚ùå Erro inesperado:', error)
  })
  .finally(async () => {
    await prisma.$disconnect()
    process.exit(0)
  })
