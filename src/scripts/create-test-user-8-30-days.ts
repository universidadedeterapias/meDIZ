// src/scripts/create-test-user-8-30-days.ts
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import { getUserPeriod, getUserLimits } from '@/lib/userPeriod'

const prisma = new PrismaClient()

async function main() {
  console.log('üß™ CRIANDO USU√ÅRIO DE TESTE (8-30 DIAS SEM PREMIUM)\n')

  const testUsers = [
    {
      name: 'Teste Usu√°rio 8 Dias',
      email: 'teste8dias@teste.com',
      days: 8,
      description: 'Usu√°rio com 8 dias de cadastro - deve ver popup e ter visualiza√ß√£o limitada'
    },
    {
      name: 'Teste Usu√°rio 15 Dias',
      email: 'teste15dias@teste.com',
      days: 15,
      description: 'Usu√°rio com 15 dias de cadastro - deve ver popup e ter visualiza√ß√£o limitada'
    },
    {
      name: 'Teste Usu√°rio 25 Dias',
      email: 'teste25dias@teste.com',
      days: 25,
      description: 'Usu√°rio com 25 dias de cadastro - deve ver popup e ter visualiza√ß√£o limitada'
    },
    {
      name: 'Teste Usu√°rio 30 Dias',
      email: 'teste30dias@teste.com',
      days: 30,
      description: 'Usu√°rio com 30 dias de cadastro - deve ver popup e ter visualiza√ß√£o limitada'
    }
  ]

  const password = 'Teste123!'
  const hashedPassword = await bcrypt.hash(password, 10)

  console.log('üìã USU√ÅRIOS DE TESTE A SEREM CRIADOS:\n')

  for (const user of testUsers) {
    try {
      // Calcula a data de cria√ß√£o (X dias atr√°s)
      const createdAt = new Date()
      createdAt.setDate(createdAt.getDate() - user.days)

      // Verifica se o usu√°rio j√° existe
      const existingUser = await prisma.user.findUnique({
        where: { email: user.email }
      })

      if (existingUser) {
        console.log(`‚ö†Ô∏è  Usu√°rio ${user.email} j√° existe, atualizando...`)
        
        await prisma.user.update({
          where: { email: user.email },
          data: {
            createdAt: createdAt,
            passwordHash: hashedPassword,
            // Garante que n√£o tem subscription ativa
            subscriptions: {
              deleteMany: {
                status: {
                  in: ['active', 'ACTIVE', 'cancel_at_period_end']
                }
              }
            }
          }
        })
        
        console.log(`‚úÖ Usu√°rio ${user.email} atualizado para ${user.days} dias atr√°s`)
      } else {
        await prisma.user.create({
          data: {
            name: user.name,
            email: user.email,
            passwordHash: hashedPassword,
            createdAt: createdAt,
            emailVerified: new Date(),
            appUsage: 'PERSONAL',
            gender: 'PREFER_NOT_TO_SAY',
            fullName: user.name,
            age: 30,
            profession: 'Teste',
            description: user.description
          }
        })
        
        console.log(`‚úÖ Usu√°rio ${user.email} criado com ${user.days} dias atr√°s`)
      }

      // Verifica as regras aplicadas
      const userPeriod = getUserPeriod(createdAt)
      const limits = getUserLimits(userPeriod)
      
      console.log(`   üìä Per√≠odo: ${userPeriod}`)
      console.log(`   üîç Limite de pesquisas: ${limits.searchLimit}`)
      console.log(`   üëÅÔ∏è  Visualiza√ß√£o completa: ${limits.fullVisualization ? '‚úÖ SIM' : '‚ùå N√ÉO'}`)
      console.log(`   üéØ Deve ver popup: ${limits.fullVisualization ? '‚ùå N√ÉO' : '‚úÖ SIM'}`)
      console.log('')

    } catch (error) {
      console.error(`‚ùå Erro ao criar/atualizar ${user.email}:`, error)
    }
  }

  console.log('üéØ USU√ÅRIOS DE TESTE CRIADOS!')
  console.log('üìß Emails: teste[X]dias@teste.com')
  console.log('üîë Senha: Teste123!')
  console.log('\nüìã PARA TESTAR AS RESTRI√á√ïES:')
  console.log('1. Fa√ßa login com qualquer um dos usu√°rios acima')
  console.log('2. V√° para /chat')
  console.log('3. Digite uma consulta (ex: "Cansa√ßo")')
  console.log('4. Observe:')
  console.log('   - Deve aparecer popup ap√≥s 2 segundos')
  console.log('   - Conte√∫do deve ter blur ap√≥s "S√≠mbolos Biol√≥gicos"')
  console.log('   - Limite de pesquisas deve ser aplicado')
  console.log('\nüîç VALIDA√á√ÉO:')
  console.log('- Usu√°rios 8-30 dias: visualiza√ß√£o limitada + popup')
  console.log('- Usu√°rios 1-7 dias: visualiza√ß√£o completa + sem popup')
  console.log('- Usu√°rios 31+ dias: visualiza√ß√£o limitada + popup')

  await prisma.$disconnect()
}

main()
