#!/usr/bin/env tsx

/**
 * Script para testar a corre√ß√£o da imagem cortada no popup
 * 
 * Este script verifica:
 * 1. Se a imagem est√° sendo carregada corretamente
 * 2. Se as dimens√µes est√£o adequadas
 * 3. Se o Cloudinary est√° configurado corretamente
 */

import { prisma } from '@/lib/prisma'

async function testPopupImageFix() {
  console.log('üîç Testando corre√ß√£o da imagem cortada no popup...\n')

  try {
    // 1. Verificar popup ativo
    const popup = await prisma.popupConfig.findFirst({
      where: { status: 'ACTIVE' },
      orderBy: { updatedAt: 'desc' }
    })

    if (!popup) {
      console.log('‚ùå Nenhum popup ativo encontrado')
      return
    }

    console.log('‚úÖ Popup ativo encontrado:')
    console.log(`   ID: ${popup.id}`)
    console.log(`   T√≠tulo: ${popup.title}`)
    console.log(`   URL da imagem: ${popup.imageUrl}`)
    console.log(`   Criado em: ${popup.createdAt}`)
    console.log(`   Atualizado em: ${popup.updatedAt}\n`)

    // 2. Verificar se a URL da imagem √© v√°lida
    if (!popup.imageUrl) {
      console.log('‚ùå Popup n√£o possui imagem configurada')
      return
    }

    // 3. Verificar se √© uma URL do Cloudinary
    const isCloudinary = popup.imageUrl.includes('res.cloudinary.com')
    console.log(`üì∏ Tipo de imagem: ${isCloudinary ? 'Cloudinary' : 'Outro'}`)
    
    if (isCloudinary) {
      // 4. Analisar URL do Cloudinary
      const urlParts = popup.imageUrl.split('/')
      const versionIndex = urlParts.findIndex(part => part.match(/^v\d+$/))
      const publicId = urlParts[versionIndex + 1]
      
      console.log(`   Public ID: ${publicId}`)
      console.log(`   URL completa: ${popup.imageUrl}`)
      
      // 5. Verificar se h√° transforma√ß√µes na URL
      const hasTransformations = popup.imageUrl.includes('/c_') || 
                                popup.imageUrl.includes('/w_') || 
                                popup.imageUrl.includes('/h_')
      
      console.log(`   Transforma√ß√µes aplicadas: ${hasTransformations ? 'Sim' : 'N√£o'}`)
      
      if (hasTransformations) {
        console.log('‚ö†Ô∏è  ATEN√á√ÉO: A imagem pode ter transforma√ß√µes que causam corte')
        console.log('   Recomenda√ß√£o: Usar URL sem transforma√ß√µes no popup')
      }
    }

    // 6. Verificar configura√ß√µes do Cloudinary
    console.log('\nüîß Verificando configura√ß√µes do Cloudinary:')
    console.log(`   CLOUDINARY_CLOUD_NAME: ${process.env.CLOUDINARY_CLOUD_NAME ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`)
    console.log(`   CLOUDINARY_API_KEY: ${process.env.CLOUDINARY_API_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`)
    console.log(`   CLOUDINARY_API_SECRET: ${process.env.CLOUDINARY_API_SECRET ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`)

    // 7. Recomenda√ß√µes
    console.log('\nüí° Recomenda√ß√µes para corrigir imagem cortada:')
    console.log('   1. Verificar se a imagem original tem propor√ß√µes adequadas')
    console.log('   2. Usar object-contain no CSS (j√° implementado)')
    console.log('   3. Configurar container com aspect-ratio adequado')
    console.log('   4. Evitar transforma√ß√µes no Cloudinary que cortem a imagem')
    console.log('   5. Testar em diferentes resolu√ß√µes de tela')

    console.log('\n‚úÖ Teste conclu√≠do!')

  } catch (error) {
    console.error('‚ùå Erro ao testar popup:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Executar o teste
testPopupImageFix()
