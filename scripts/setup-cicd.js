#!/usr/bin/env node

// scripts/setup-cicd.js
// Script para configurar CI/CD do projeto meDIZ

const fs = require('fs');
const path = require('path');

console.log('üöÄ Configurando CI/CD para meDIZ...');
console.log('==================================');

// Verificar se estamos no diret√≥rio correto
if (!fs.existsSync('package.json')) {
    console.log('‚ùå Execute este script na raiz do projeto meDIZ');
    process.exit(1);
}

// Verificar se o Git est√° configurado
if (!fs.existsSync('.git')) {
    console.log('‚ùå Este n√£o √© um reposit√≥rio Git');
    process.exit(1);
}

console.log('‚úÖ Reposit√≥rio Git encontrado');

// Verificar se os workflows foram criados
if (!fs.existsSync('.github/workflows')) {
    console.log('‚ùå Diret√≥rio .github/workflows n√£o encontrado');
    console.log('Execute primeiro: mkdir -p .github/workflows');
    process.exit(1);
}

console.log('‚úÖ Workflows encontrados');

// Verificar se o script de verifica√ß√£o pr√©-deploy existe
if (!fs.existsSync('scripts/pre-deploy-check.js')) {
    console.log('‚ùå Script de verifica√ß√£o pr√©-deploy n√£o encontrado');
    process.exit(1);
}

console.log('‚úÖ Script de verifica√ß√£o pr√©-deploy encontrado');

// Verificar se o package.json tem os scripts necess√°rios
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
if (!packageJson.scripts['check:deploy']) {
    console.log('‚ùå Scripts de CI/CD n√£o encontrados no package.json');
    process.exit(1);
}

console.log('‚úÖ Scripts de CI/CD configurados no package.json');

// Verificar se o arquivo .env.local existe
if (!fs.existsSync('.env.local')) {
    console.log('‚ö†Ô∏è  Arquivo .env.local n√£o encontrado');
    console.log('Crie o arquivo .env.local com as vari√°veis necess√°rias:');
    console.log('');
    console.log('DATABASE_URL=postgresql://...');
    console.log('NEXTAUTH_SECRET=...');
    console.log('NEXTAUTH_URL=http://localhost:3000');
    console.log('GOOGLE_CLIENT_ID=...');
    console.log('GOOGLE_CLIENT_SECRET=...');
    console.log('');
}

console.log('');
console.log('üîß Pr√≥ximos passos para configurar CI/CD:');
console.log('==========================================');
console.log('');
console.log('1. üìù Configure os secrets no GitHub:');
console.log('   - Acesse: Settings ‚Üí Secrets and variables ‚Üí Actions');
console.log('   - Adicione os seguintes secrets:');
console.log('     ‚Ä¢ DATABASE_URL');
console.log('     ‚Ä¢ NEXTAUTH_SECRET');
console.log('     ‚Ä¢ NEXTAUTH_URL');
console.log('     ‚Ä¢ GOOGLE_CLIENT_ID');
console.log('     ‚Ä¢ GOOGLE_CLIENT_SECRET');
console.log('     ‚Ä¢ VERCEL_TOKEN');
console.log('     ‚Ä¢ VERCEL_ORG_ID');
console.log('     ‚Ä¢ VERCEL_PROJECT_ID');
console.log('');
console.log('2. üåç Configure os environments no GitHub:');
console.log('   - Acesse: Settings ‚Üí Environments');
console.log('   - Crie os environments: \'staging\' e \'production\'');
console.log('');
console.log('3. üîí Configure prote√ß√µes de branch:');
console.log('   - Acesse: Settings ‚Üí Branches');
console.log('   - Configure prote√ß√µes para \'main\' e \'develop\'');
console.log('');
console.log('4. üß™ Teste o pipeline:');
console.log('   - Fa√ßa um push para a branch \'develop\'');
console.log('   - Verifique se o workflow executa corretamente');
console.log('');
console.log('5. üìä Monitore os workflows:');
console.log('   - Acesse: Actions no GitHub');
console.log('   - Verifique os logs e resultados');
console.log('');

// Verificar se o Vercel est√° configurado
if (!fs.existsSync('vercel.json')) {
    console.log('‚ö†Ô∏è  Arquivo vercel.json n√£o encontrado');
    console.log('O arquivo foi criado automaticamente');
}

console.log('‚úÖ Configura√ß√£o b√°sica do CI/CD conclu√≠da!');
console.log('');
console.log('üìö Documenta√ß√£o completa: docs/ci-cd-pipeline.md');
console.log('üîç Script de verifica√ß√£o: npm run check:deploy');
console.log('üèóÔ∏è  Build seguro: npm run build:safe');
console.log('');
console.log('üéâ CI/CD configurado com sucesso!');
