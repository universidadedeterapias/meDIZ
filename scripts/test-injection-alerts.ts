/**
 * üß™ Script de Teste: Alertas de Inje√ß√£o
 * 
 * Este script testa se o sistema de detec√ß√£o e alertas est√° funcionando corretamente.
 * 
 * Uso:
 *   tsx scripts/test-injection-alerts.ts
 */

import { detectInjection } from '@/lib/security/injection-detector'
import { processInjectionDetection } from '@/lib/security/injection-alert-service'
import { NextRequest } from 'next/server'

async function testInjectionDetection() {
  console.log('üß™ Testando Sistema de Detec√ß√£o de Inje√ß√£o\n')
  
  // Teste 1: SQL Injection
  console.log('üìã Teste 1: SQL Injection')
  const sqlPayload = {
    fullName: "'; DROP TABLE users; --",
    age: 30
  }
  
  const sqlDetections = detectInjection({
    body: sqlPayload
  })
  
  console.log('  Detec√ß√µes encontradas:', sqlDetections.length)
  if (sqlDetections.length > 0) {
    console.log('  ‚úÖ SQL Injection detectado:', {
      type: sqlDetections[0].type,
      severity: sqlDetections[0].severity,
      pattern: sqlDetections[0].pattern
    })
  } else {
    console.log('  ‚ùå FALHA: SQL Injection n√£o detectado')
  }
  
  // Teste 2: Command Injection
  console.log('\nüìã Teste 2: Command Injection')
  const cmdPayload = {
    command: "; rm -rf /",
    file: "test.txt"
  }
  
  const cmdDetections = detectInjection({
    body: cmdPayload
  })
  
  console.log('  Detec√ß√µes encontradas:', cmdDetections.length)
  if (cmdDetections.length > 0) {
    console.log('  ‚úÖ Command Injection detectado:', {
      type: cmdDetections[0].type,
      severity: cmdDetections[0].severity,
      pattern: cmdDetections[0].pattern
    })
  } else {
    console.log('  ‚ùå FALHA: Command Injection n√£o detectado')
  }
  
  // Teste 3: Valor Seguro (n√£o deve detectar)
  console.log('\nüìã Teste 3: Valor Seguro')
  const safePayload = {
    fullName: "Jo√£o Silva",
    age: 30,
    email: "joao@example.com"
  }
  
  const safeDetections = detectInjection({
    body: safePayload
  })
  
  console.log('  Detec√ß√µes encontradas:', safeDetections.length)
  if (safeDetections.length === 0) {
    console.log('  ‚úÖ Valor seguro n√£o gerou falso positivo')
  } else {
    console.log('  ‚ö†Ô∏è  ATEN√á√ÉO: Falso positivo detectado')
  }
  
  // Teste 4: Processamento de Alerta (apenas simula√ß√£o)
  console.log('\nüìã Teste 4: Processamento de Alerta')
  
  if (sqlDetections.length > 0) {
    try {
      // Criar requisi√ß√£o mock
      const mockReq = new NextRequest('http://localhost:3000/api/user/form', {
        method: 'POST',
        headers: {
          'x-forwarded-for': '127.0.0.1',
          'user-agent': 'Test Agent'
        }
      })
      
      console.log('  Tentando processar alerta...')
      const result = await processInjectionDetection(
        sqlDetections[0],
        mockReq,
        '/api/user/form',
        'test-user-id'
      )
      
      console.log('  ‚úÖ Alerta processado:', {
        attemptId: result.attemptId,
        alertSent: result.alertSent
      })
    } catch (error: any) {
      console.log('  ‚ö†Ô∏è  Erro ao processar alerta (pode ser normal se DB n√£o estiver configurado):', error.message)
    }
  }
  
  console.log('\n‚úÖ Testes conclu√≠dos!')
  console.log('\nüìù Notas:')
  console.log('  - Os testes acima verificam apenas a detec√ß√£o')
  console.log('  - Para testar envio real de WhatsApp, precisa de DB configurado')
  console.log('  - Verifique os logs do servidor para mais detalhes')
}

testInjectionDetection().catch(console.error)

