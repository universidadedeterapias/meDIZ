name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Verificações de Qualidade
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Pre-deployment checks
        run: npm run check:deploy

      - name: 📝 TypeScript check
        run: npx tsc --noEmit

      - name: 🧹 ESLint check
        run: npx eslint src --ext .ts,.tsx

      - name: 🗄️ Prisma validation
        run: npx prisma validate

  # Job 2: Testes (quando implementados)
  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests (quando implementados)
        run: echo "Tests not implemented yet"
        # run: npm test

  # Job 3: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Generate Prisma Client
        run: npx prisma generate

      - name: 🏗️ Build application
        run: npm run build
        env:
          # Variáveis mínimas para build
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  # Job 4: Deploy para Staging (branch develop)
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Generate Prisma Client
        run: npx prisma generate

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod=false'
          working-directory: ./

  # Job 5: Deploy para Produção (branch main)
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Generate Prisma Client
        run: npx prisma generate

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: 📊 Notify deployment success
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "🌐 Application deployed to: https://mediz-app.vercel.app"

  # Job 6: Limpeza e Notificações
  cleanup:
    name: 🧹 Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "🎉 CI/CD Pipeline completed!"
          echo "📊 Jobs status:"
          echo "  - Quality Checks: ${{ needs.quality-checks.result }}"
          echo "  - Tests: ${{ needs.tests.result }}"
          echo "  - Build: ${{ needs.build.result }}"
          echo "  - Deploy Staging: ${{ needs.deploy-staging.result }}"
          echo "  - Deploy Production: ${{ needs.deploy-production.result }}"
