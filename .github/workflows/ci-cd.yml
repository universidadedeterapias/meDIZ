name: Simple CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📝 TypeScript check
        run: npx tsc --noEmit

      - name: 🧹 ESLint check
        run: npx eslint src --ext .ts,.tsx

      - name: 🗄️ Prisma validation
        run: npx prisma validate

  build-check:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Generate Prisma Client
        run: npx prisma generate

      - name: 🏗️ Build application
        run: npm run build
        env:
          # Variáveis mínimas para build
          DATABASE_URL: "postgresql://user:pass@localhost:5432/test"
          NEXTAUTH_SECRET: "test-secret"
          NEXTAUTH_URL: "http://localhost:3000"

      - name: 📊 Notify deployment success
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "🌐 Application deployed to: https://mediz-app.vercel.app"

  # Job 6: Limpeza e Notificações
  cleanup:
    name: 🧹 Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "🎉 CI/CD Pipeline completed!"
          echo "📊 Jobs status:"
          echo "  - Quality Checks: ${{ needs.quality-checks.result }}"
          echo "  - Tests: ${{ needs.tests.result }}"
          echo "  - Build: ${{ needs.build.result }}"
          echo "  - Deploy Staging: ${{ needs.deploy-staging.result }}"
          echo "  - Deploy Production: ${{ needs.deploy-production.result }}"
